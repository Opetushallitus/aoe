name: aoe-ci
services:

  aoe-web-frontend:
    profiles: [aoe]
    build:
      context: aoe-web-frontend
      dockerfile: ./docker/Dockerfile
    image: ${AOE_WEB_FRONTEND_TAG:-aoe-web-frontend:latest}
    container_name: aoe-web-frontend
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/dev/webdata:/usr/share/nginx/html/webdata
    user: "root:5606"
    depends_on:
      aoe-web-backend:
        condition: service_started
    ports:
      - 8282:80
      - 33344:8080
    networks:
      - default
    environment:
      - ENV=ci

  test-runner:
    profiles: [test]
    build:
      context: .
      dockerfile: Dockerfile.playwright-test-runner 
    networks:
      - default
    volumes:
      - ./screenshots:/screenshots
      - ./playwright-results:/playwright-results
    environment:
      - CI=true
      - GITHUB_SHA
      - GITHUB_SERVER_URL
      - GITHUB_REPOSITORY
      - GITHUB_RUN_ID

  aoe-streaming-app:
    profiles: [aoe]
    hostname: aoe-streaming-app
    build:
      context: aoe-streaming-app
      dockerfile: ./docker/Dockerfile
    image: ${AOE_STREAMING_APP_TAG:-aoe-streaming-app:latest}
    container_name: aoe-streaming-app
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
    ports:
      - 3001:3001
    env_file:
      - path: ./aoe-streaming-app/.env.ci
    depends_on:
        localstack:
          condition: service_started

  aoe-data-services:
    profiles: [aoe]
    hostname: aoe-data-services
    build:
      context: aoe-data-services
      dockerfile: ./Dockerfile
    image: ${AOE_DATA_SERVICES_TAG:-aoe-data-services:latest}
    restart: unless-stopped
    depends_on:
      aoe-web-backend:
        condition: service_started
    ports:
      - 8002:8002
    env_file:
      - path: ./aoe-data-services/.env.ci

  aoe-semantic-apis:
    profiles: [aoe]
    hostname: aoe-semantic-apis
    build:
      context: aoe-semantic-apis
      dockerfile: ./docker/Dockerfile
    image: ${AOE_SEMANTIC_APIS_TAG:-aoe-semantic-apis:latest}
    container_name: aoe-semantic-apis
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=info
      - PORT_LISTEN=3002
    ports:
      - 3002:3002
    env_file:
      - path: ./aoe-semantic-apis/.env.ci
        required: true
    command: sh -c "npm run start"

  aoe-data-analytics:
    profiles: [aoe]
    hostname: aoe-data-analytics
    build:
      context: aoe-data-analytics
      dockerfile: ./Dockerfile
      secrets:
        - trust_store_password
    image: ${AOE_DATA_ANALYTICS_TAG:-aoe-data-analytics:latest}
    container_name: aoe-data-analytics
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      aoe-mongodb:
        condition: service_started
      aoe-postgres:
        condition: service_started
    entrypoint: ["java", "-Xms512m", "-Xmx512m", "-Djava.security.egd=file:/dev/./urandom", "-jar", "aoe-data-analytics.jar"]
    ports:
      - 8080:8080
    env_file:
      - path: ./aoe-data-analytics/.env.ci
    logging:
      options:
        max-size: '10m'
        max-file: '3'

  aoe-web-backend:
    profiles: [aoe]
    build:
      context: aoe-web-backend
      dockerfile: ./docker/Dockerfile.local
    image: ${AOE_WEB_BACKEND_TAG:-aoe-web-backend:latest}
    container_name: aoe-web-backend
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://aoe-web-backend:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./docker/dev/web/thumbnail/:/app/thumbnail:rw
      - ./docker/dev/web/uploads:/app/uploads:rw
      - ./docker/dev/web/webdata:/webdata:rw
      - ./docker/dev/web/webdata/htmlfolder:/webdata/htmlfolder:rw
      - ./aoe-web-backend/src:/app/src:rw
    depends_on:
      aoe-oidc-server:
        condition: service_healthy
      aoe-postgres:
        condition: service_started
      kafka:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      redis:
        condition: service_started
      opensearch:
        condition: service_healthy
    environment:
      - NODE_ENV=development
    ports:
      - 3000:3000
    env_file:
      - ./aoe-web-backend/.env.ci

  redis:
    profiles: [aoe]
    image: redis:6.2.20-alpine@sha256:77697a75da9f94e9357b61fcaf8345f69e3d9d32e9d15032c8415c21263977dc
    container_name: redis
    privileged: true
    command: ["redis-server", "--requirepass", "dev_password", "--user", "devuser", "on", ">devuser_password", "~*", "+@all", "--user", "default", "off", "nopass", "nocommands"]
    restart: unless-stopped
    environment:
      REDIS_REPLICATION_MODE: master
    volumes:
      - ./docker/dev/redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -u redis://devuser:devuser_password@localhost:6379 ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    ports:
      - 6379:6379

  aoe-postgres:
    profiles: [aoe]
    image: postgres:15-alpine@sha256:64583b3cb4f2010277bdd9749456de78e5c36f8956466ba14b0b96922e510950
    container_name: aoe-postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: aoeuser
      POSTGRES_PASSWORD: aoepassword
      POSTGRES_DB: aoe
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U aoeuser" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/init-scripts/aoe-init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./docker/init-scripts/aoe-user.sql:/docker-entrypoint-initdb.d/2-init.sql
      - ./docker/dev/postgres_data:/var/lib/postgresql/data

  opensearch:
    profiles: [aoe]
    image: opensearchproject/opensearch:2.19.3@sha256:e96cc6ae1500a073d973c0906f30f7cf4d9c461f32f855f9242a2da933660cdd
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - DISABLE_SECURITY_PLUGIN=true
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Asfsadfsad!@2
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 9200:9200
      - 9600:9600

  aoe-mongodb:
    profiles: [aoe]
    image: mongo:4.0
    container_name: aoe-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: aoerootuser
      MONGO_INITDB_ROOT_PASSWORD: aoerootpassword
      MONGO_INITDB_DATABASE: aoe
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    volumes:
      - ./docker/dev/mongo_data:/data/db
      - ./docker/init-scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - 27017:27017

  zookeeper:
    profiles: [aoe]
    image: confluentinc/cp-zookeeper:7.9.4@sha256:434514c38139e80a1561b20b01a78af7123b16561ce2ee3276c7e2c6c086802a
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: ERROR
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - 2181:2181

  kafka:
    profiles: [aoe]
    image: confluentinc/cp-kafka:7.9.4@sha256:0142ea2a6606e967ac22b5d58f6ba36de3e649980e6ac723a6341fc3c0406888
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
      KAFKA_LOG4J_LOGGERS: kafka=ERROR,kafka.network.RequestChannel$=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,kafka.request.logger=ERROR,kafka.controller=ERROR,kafka.log.LogCleaner=ERROR,state.change.logger=ERROR,kafka.authorizer.logger=ERROR
    ports:
      - 29092:29092
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka2:
    profiles: [aoe]
    image: confluentinc/cp-kafka:7.9.4@sha256:0142ea2a6606e967ac22b5d58f6ba36de3e649980e6ac723a6341fc3c0406888
    container_name: kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,OUTSIDE://kafka2:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
      KAFKA_LOG4J_LOGGERS: kafka=ERROR,kafka.network.RequestChannel$=ERROR,kafka.producer.async.DefaultEventHandler=ERROR,kafka.request.logger=ERROR,kafka.controller=ERROR,kafka.log.LogCleaner=ERROR,state.change.logger=ERROR,kafka.authorizer.logger=ERROR
    ports:
      - 39092:39092
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  localstack:
    profiles: [aoe]
    image: localstack/localstack:4.9.2@sha256:59373b4a27dba3ec15c4db0b7455f0cb68c8a42300e2cbbe362b440f9a131697
    container_name: localstack 
    networks:
      default:
        aliases:
          - aoe.s3.localhost.localstack.cloud
          - aoepdf.s3.localhost.localstack.cloud
          - aoethumbnail.s3.localhost.localstack.cloud
    environment:
      - SERVICES=s3
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DEBUG="1"
      - HOSTNAME_EXTERNAL=localhost
    ports:
      - 4566:4566
    volumes:
      - ./docker/init-scripts/aws-shutdown.sh:/etc/localstack/init/shutdown.d/aws-shutdown.sh
      - ./docker/init-scripts/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
      - ./docker/dev/localstack/S3:/host-directory

  aoe-oidc-server:
    profiles: [aoe]
    hostname: aoe-oidc-server
    image: ghcr.io/soluto/oidc-server-mock:9.0.1@sha256:4cf0fe8752cdf78266e5178ee6551762e398ec0c6be6abea154fab32646db6b0
    container_name: aoe-oidc-server
    restart: on-failure:2
    networks:
      - default
    expose:
      - 80
      - 443
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/.well-known/openid-configuration" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      SERVER_OPTIONS_INLINE: |
        {
          "AccessTokenJwtType": "JWT",
          "Discovery": {
            "ShowKeySet": true
          },
          "Authentication": {
            "CookieSameSiteMode": "Lax",
            "CheckSessionCookieSameSiteMode": "Lax"
          }
        }

      OVERRIDE_STANDARD_IDENTITY_RESOURCES: true
      IDENTITY_RESOURCES_INLINE: |
        [
          {
            "Name": "profile",
            "ClaimTypes": [ "name", "given_name", "family_name", "uid", "id" ]
          },
         {
            "Name": "openid",
            "ClaimTypes": [ "sub" ]
          }
        ]

      USERS_CONFIGURATION_INLINE: |
        [
          {
            "SubjectId": "aoeuser-1",
            "Username": "aoeuser",
            "Password": "password123",
            "Claims": [
              {
                "Type": "sub",
                "Value": "aoeuser-1",
                "ValueType": "string"
              },
              {
                "Type": "locale",
                "Value": "de",
                "ValueType": "string"
              },
              {
                "Type": "uid",
                "Value": "c37ccf17-c8b8-4d5f-b2be-a751f8a4f46e",
                "ValueType": "string"
              },
              {
                "Type": "id",
                "Value": "1",
                "ValueType": "string"
              },
              {
                "Type": "name",
                "Value": "AOE User",
                "ValueType": "string"
              },
              {
                "Type": "given_name",
                "Value": "AOE_first",
                "ValueType": "string"
              },
              { 'Type': 'some-custom-identity-user-claim', 'Value': "Jack's Custom User Claim", 'ValueType': 'string' },
              {
                "Type": "family_name",
                "Value": "AOE_last",
                "ValueType": "string"
              },
              {
                "Type": "email",
                "Value": "aoeuser@aoe.fi",
                "ValueType": "string"
              }
            ]
          }
        ]
      CLIENTS_CONFIGURATION_INLINE: |
        [
          {
            "ClientId": "aoe-client",
            "ClientSecrets": ["aoe-secret"],
            "RedirectUris": ["https://demo.aoe.fi/api/secure/redirect"],
            "AllowedScopes": ["openid", "offline_access", "profile"],
            "AllowOfflineAccess" : "true",
            "AllowedGrantTypes": ["authorization_code"]
          }
        ]
      ASPNETCORE_URLS: http://+:80
      ASPNET_SERVICES_OPTIONS_INLINE: |
        {
          "ForwardedHeadersOptions": {
            "ForwardedHeaders" : "All"
          }
        }

  nginx:
    profiles: [aoe]
    image: nginx:latest@sha256:0511d915d4e7467a27e8eecd90643dbb60e148c0ef3b7486655296f8c768cadc
    container_name: nginx
    hostname: nginx
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/nginx-selfsigned.crt:/etc/nginx/certs/nginx-selfsigned.crt:ro
      - ./docker/nginx/nginx-selfsigned.key:/etc/nginx/certs/nginx-selfsigned.key:ro
    networks:
      default:
        aliases:
          - demo.aoe.fi
    depends_on:
      aoe-web-backend:
        condition: service_started
      aoe-web-frontend:
        condition: service_started
      aoe-semantic-apis:
        condition: service_started

networks:
  default:
    name: aoe_ci

volumes:
  postgres_data:

secrets:
  trust_store_password:
    environment: TRUST_STORE_PASSWORD
